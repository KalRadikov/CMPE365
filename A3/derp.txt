//CMPE 365 ASSIGNMENT 3 - APPLYING HOFFMANS ALGORITHM TO A TEXT BASE FILE
//NAMES: ZACHARY ROSE 10103043 || MACKENZIE MARTYN 10106562
//DATE: NOVEMBER 1ST 2016

import java.util.ArrayList;
import java.awt.List;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;


public class Main 
{
	
	

	public static void main(String[] args) throws IOException 
	{
		//Array list
		ArrayList<CharacterObj> charList = new ArrayList<CharacterObj>();
		int i = 0;
		int flag = 0;
		int charCount = 0;
		 
		try {
		      FileInputStream TEXT = new FileInputStream("SamMcGee2.txt");

		     // InputStream inStream = new FileInputStream("C:/a.txt");
		      final InputStreamReader streamReader = new InputStreamReader(TEXT, "UTF-8");
		      @SuppressWarnings("resource")
			final BufferedReader bufferedReader = new BufferedReader(streamReader);
		      int ch;
		      while ((ch = bufferedReader.read()) > -1)
		      {
		    	  charCount++;
		    	  if (charList.size() > 0 )
		        {
		        	i = 0;
					while (i < charList.size())
					{
						if (charList.get(i).getCharacter() == ch)
						{
							charList.get(i).increaseCount();
							flag = 1;
							break;
						}
						
						i++;
					}
					
					if (flag == 0)
					{
						charList.add(new CharacterObj(ch));
					}
					
					flag = 0;
		        }
		        else 
		        {
		        	charList.add(new CharacterObj(ch));
		        } 
			 } 
		}  
	    catch (IOException e) 
		{
	    	  e.printStackTrace();
	    }
		
		System.out.println(charCount);
		int min = 1000;
		int minIndex = 0;

		
		for(i = 0; i < charList.size(); i++)
		{
			min = charList.get(i).getCount();
			minIndex = i;
			
			for(int j = i; j < charList.size(); j++)
			{
				if (charList.get(j).getCount() < min)
				{
					min = charList.get(j).getCount(); 
					minIndex = j;
					
				}
			}
			CharacterObj temp = charList.get(i);
			charList.set(i, charList.get(minIndex));
			charList.set(minIndex, temp);
			System.out.println(charList.get(i).getCharasChar() + " " + charList.get(i).getCharacter() + " " +charList.get(i).getCount());
		}
		
		//Start encoding tree
		//Node [][] tree = new Node[charList.size()][4614];
		ArrayList<Node> tree = new ArrayList<Node>();
		
		//Load in all the leaf nodes
		for (i = 0; i < charList.size(); i++)
		{
			tree.add(new Node(charList.get(i).getCharasChar(), charList.get(i).getCharacter(), charList.get(i).getCount()));
		}
		

		while (tree.get(tree.size() - 1).getCount() < charCount)
		{
			//Find the two smallest
			min = tree.get(0).getNodeCount();
			minIndex = 0;
			
			//Loop though and find the minimum value
			for (int j = 0; j < tree.size(); j++)
			{
				if ((tree.get(j).getNodeCount() < min) && (tree.get(j).getUsed() == false))
				{
					min = tree.get(j).getNodeCount();
					minIndex = j;
				}
			}
			
			//Store first node
			Node nodeOne = tree.get(minIndex);
			
			//Set it to used so it is not found again
			nodeOne.Used(true);
			
			//find first unused value in tree
			int m = 0;
			flag = 0;
			while ( m < tree.size() && flag == 0)
			{
				if (tree.get(m).getUsed() == false)
				{
					min = tree.get(m).getNodeCount();
					minIndex = m;
					flag = 1;
				}
				m++;
			}
			
			//Now find the second min value
			for (int j = m; j < tree.size(); j++)
			{
				if ((tree.get(j).getNodeCount() < min) && (tree.get(j).getUsed() == false))
				{
					min = tree.get(j).getNodeCount();
					minIndex = j;
				}
			}
			
			//Sve the second node
			Node nodeTwo = tree.get(minIndex);
			nodeTwo.Used(true);
			
			//Make the new root for those two nodes
			Node root = new Node(nodeOne.getCharacters(), nodeTwo.getCharacters(),nodeOne.getCount(), nodeTwo.getCount());
			
			//Add node to tree
			tree.add(root);
		}
		
		//Array list of ints
		 ArrayList<Integer> bitCode = new ArrayList<>();
		 int fileSize = 0;
		 
		
		//Now that the tree is build go from root down and find the bit code and number of bits for each character
		for (i = 0; i < charList.size(); i++)
		{
			int c = tree.get(0).getCharacters().size();
			int index = 1;
			int child;
			//1 is right 0 is left
			while (c > 1)
			{
				//determine if node is in right or left child
				child = tree.get(index - 1).getChild(charList.get(i).getCharasChar().charAt(0));
				bitCode.add(child);
				
				//Go to the index of the child
				if (child == 1)
				{
					index = index*2;
				}
				else
				{
					index = index * 2 +1;
				}
				
				//Get the length of the child
				c = tree.get(index - 1).getCharacters().size();
			}
			
			//Hit the length of this child is one so add bitcode to character obj
			charList.get(i).setBitCode(bitCode);
			fileSize = fileSize + (bitCode.size() * charList.get(i).getCount());
			
			//Clear arraylist
			bitCode.clear();
		}
		
		System.out.println(fileSize);
		//Add up all the bits
		//file size should be the new files size
		
		
				

		
		

	}
}

---------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.ArrayList;

public class CharacterObj 
{
	private int count;
	private int theChar;
	private String theCharasChar;
	private ArrayList<Integer> bitCode = new ArrayList<>();
	
	public CharacterObj(int inputChar)
	{
		theChar = inputChar;
		theCharasChar = Character.toString((char)inputChar) ;
		count = 1;
	}
	
	public int getCharacter()
	{
		return theChar;
	}
	
	public String getCharasChar()
	{
		return theCharasChar;
	}
	
	public int getCount()
	{
		return count;
	}
	public void increaseCount()
	{
		count = count + 1;
	}
	
	public void setBitCode(ArrayList<Integer> bits)
	{
		bitCode = (ArrayList<Integer>)bits.clone();
	}
}
---------------------------------------------------------------------------------------------------------------------------------
import java.util.ArrayList;

public class Node {

	private int nodeCount;
	private ArrayList<Integer> nodeChar = new ArrayList<>();
	private ArrayList<Integer> rightChild= new ArrayList<>();
	private ArrayList<Integer> leftChild= new ArrayList<>();
	private int rightChildCount;
	private int leftChildCount;
	private boolean used;
	
	public Node(ArrayList<Integer> charOne, ArrayList<Integer> charTwo, int countOne, int countTwo)
	{
		nodeCount = countOne + countTwo;
		rightChild = (ArrayList<Integer>)charOne.clone();
		leftChild = (ArrayList<Integer>)charTwo.clone();
		nodeChar.addAll(charOne);
		nodeChar.addAll(charTwo);
		used = false;
	}
	
	
	public Node(String one,int charOne, int countOne)
	{
		nodeCount = countOne;
		rightChild = null;
		leftChild = null;
		nodeChar.add(charOne);
		used = false;
	}
	
	
	public int getNodeCount()
	{
		return nodeCount;
	}
	
	public void Used(boolean s)
	{
		used = s;
	}
	
	public boolean getUsed()
	{
		return used;
	}
	
	public ArrayList<Integer> getCharacters()
	{
		return nodeChar;
	}
	
	public int getCount()
	{
		return nodeCount;
	}
	
	public int getChild(char a)
	{
		int index = 0;
		//Its in the right child
		if (rightChild.indexOf(a) >= 1)
		{
			return 1;
		}
		//Its in the left child
		else
		{
			return 0;
		}
			
	}
	

}
